# -*- coding: utf-8 -*-
"""
/***************************************************************************
 EchoDockWidget
                                 A QGIS plugin
 Echo
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-04-23
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Echo
        email                : Echo
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import importlib

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal, Qt, QThread
from qgis.core import QgsMessageLog

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Echo_dockwidget_base.ui'))


class EchoDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, iface, parent=None):
        """Constructor."""
        super(EchoDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.pushButton.clicked.connect(self.open_widget)

        # Save reference to the QGIS interface
        self.iface = iface

    def open_widget(self):
        ui_file = "subwidget.ui"
        gui_file = "gui_setup"
        sub_form_class, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), ui_file))

        self.open_sub_widget = SubWidgetTool(sub_form_class, gui_file)
        self.iface.addDockWidget(Qt.LeftDockWidgetArea, self.open_sub_widget)
        self.open_sub_widget.show()

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()


class SubWidgetTool(QtWidgets.QDockWidget):
    def __init__(self, sub_form_class, gui_file, parent=None):
        super(SubWidgetTool, self).__init__(parent)

        QgsMessageLog.logMessage("Did it reload???", "TEST")

        # UI
        self.ui = sub_form_class()
        self.ui.setupUi(self)

        # Set-up configuration
        import sys
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))

        self.config = importlib.import_module(gui_file)
        self.config.setup_buttons(self.ui)


class WorkerThread(QThread):
    # This is the thread that each tool's main code will use
    started = pyqtSignal()
    finished = pyqtSignal()

    def __init__(self, function, args):
        super().__init__()
        self.function = function
        self.args = args

    def run(self):
        self.function(self.args)

    def start(self):
        self.started.emit()

    def finish(self):
        self.finished.emit()